// <auto-generated />
using System;
using MeterWeb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeterWeb.Migrations
{
    [DbContext(typeof(DBLibraryContext))]
    [Migration("20210310112808_AddReadingsReadingNumber")]
    partial class AddReadingsReadingNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeterWeb.Flat", b =>
                {
                    b.Property<int>("FlatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FLAT_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlatAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FLAT_ADDRESS");

                    b.HasKey("FlatId");

                    b.ToTable("FLATS");
                });

            modelBuilder.Entity("MeterWeb.Meter", b =>
                {
                    b.Property<int>("MeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("METER_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("MeterDataLastReplacement")
                        .HasColumnType("date")
                        .HasColumnName("METER_DATA_LAST_REPLACEMENT");

                    b.Property<int>("MeterFlatId")
                        .HasColumnType("int")
                        .HasColumnName("METER_FLAT_ID");

                    b.Property<int>("MeterNumbers")
                        .HasColumnType("int")
                        .HasColumnName("METER_NUMBERS");

                    b.Property<int>("MeterTypeId")
                        .HasColumnType("int")
                        .HasColumnName("METER_TYPE_ID");

                    b.HasKey("MeterId");

                    b.HasIndex("MeterFlatId");

                    b.HasIndex("MeterTypeId");

                    b.ToTable("METERS");
                });

            modelBuilder.Entity("MeterWeb.MeterType", b =>
                {
                    b.Property<int>("MeterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("METER_TYPE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeterServiceId")
                        .HasColumnType("int")
                        .HasColumnName("METER_SERVICE_ID");

                    b.Property<string>("MeterTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("METER_TYPE_NAME");

                    b.HasKey("MeterTypeId");

                    b.HasIndex("MeterServiceId");

                    b.ToTable("METER_TYPES");
                });

            modelBuilder.Entity("MeterWeb.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PAYMENT_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PaymentDataOfCurrrentPayment")
                        .HasColumnType("date")
                        .HasColumnName("PAYMENT_DATA_OF_CURRRENT_PAYMENT");

                    b.Property<decimal>("PaymentDiscount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PAYMENT_DISCOUNT");

                    b.Property<decimal>("PaymentSumOfCurrentMonthPayment")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PAYMENT_SUM_OF_CURRENT_MONTH_PAYMENT");

                    b.Property<int>("PaymentTariffId")
                        .HasColumnType("int")
                        .HasColumnName("PAYMENT_TARIFF_ID");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentTariffId");

                    b.ToTable("PAYMENTS");
                });

            modelBuilder.Entity("MeterWeb.Reading", b =>
                {
                    b.Property<int>("ReadingId")
                        .HasColumnType("int")
                        .HasColumnName("READING_ID");

                    b.Property<DateTime?>("ReadingDataOfCurrentReading")
                        .HasColumnType("date")
                        .HasColumnName("READING_DATA_OF_CURRENT_READING");

                    b.Property<int>("ReadingMeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("READING_METER_ID");

                    b.Property<int>("ReadingNumber")
                        .HasColumnType("int");

                    b.Property<int>("ReadingPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("READING_PAYMENT_ID");

                    b.HasKey("ReadingId");

                    b.HasIndex("ReadingMeterId");

                    b.HasIndex("ReadingPaymentId");

                    b.ToTable("READINGS");
                });

            modelBuilder.Entity("MeterWeb.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERVICE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SERVICE_NAME");

                    b.HasKey("ServiceId");

                    b.ToTable("SERVICES");
                });

            modelBuilder.Entity("MeterWeb.Tariff", b =>
                {
                    b.Property<int>("TariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TARIFF_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("TariffPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("TARIFF_PRICE");

                    b.Property<string>("TariffPrivilege")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TARIFF_PRIVILEGE");

                    b.Property<int>("TariffServiceId")
                        .HasColumnType("int")
                        .HasColumnName("TARIFF_SERVICE_ID");

                    b.HasKey("TariffId");

                    b.HasIndex("TariffServiceId");

                    b.ToTable("TARIFFS");
                });

            modelBuilder.Entity("MeterWeb.Meter", b =>
                {
                    b.HasOne("MeterWeb.Flat", "MeterFlat")
                        .WithMany("Meters")
                        .HasForeignKey("MeterFlatId")
                        .HasConstraintName("FK_METERS_FLATS")
                        .IsRequired();

                    b.HasOne("MeterWeb.MeterType", "MeterType")
                        .WithMany("Meters")
                        .HasForeignKey("MeterTypeId")
                        .HasConstraintName("FK_METERS_METER_TYPES")
                        .IsRequired();

                    b.Navigation("MeterFlat");

                    b.Navigation("MeterType");
                });

            modelBuilder.Entity("MeterWeb.MeterType", b =>
                {
                    b.HasOne("MeterWeb.Service", "MeterService")
                        .WithMany("MeterTypes")
                        .HasForeignKey("MeterServiceId")
                        .HasConstraintName("FK_METER_TYPES_SERVICES")
                        .IsRequired();

                    b.Navigation("MeterService");
                });

            modelBuilder.Entity("MeterWeb.Payment", b =>
                {
                    b.HasOne("MeterWeb.Tariff", "PaymentTariff")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTariffId")
                        .HasConstraintName("FK_PAYMENTS_TARIFFS")
                        .IsRequired();

                    b.Navigation("PaymentTariff");
                });

            modelBuilder.Entity("MeterWeb.Reading", b =>
                {
                    b.HasOne("MeterWeb.Meter", "ReadingMeter")
                        .WithMany("Readings")
                        .HasForeignKey("ReadingMeterId")
                        .HasConstraintName("FK_READINGS_METERS")
                        .IsRequired();

                    b.HasOne("MeterWeb.Payment", "ReadingPayment")
                        .WithMany("Readings")
                        .HasForeignKey("ReadingPaymentId")
                        .HasConstraintName("FK_READINGS_PAYMENTS")
                        .IsRequired();

                    b.Navigation("ReadingMeter");

                    b.Navigation("ReadingPayment");
                });

            modelBuilder.Entity("MeterWeb.Tariff", b =>
                {
                    b.HasOne("MeterWeb.Service", "TariffService")
                        .WithMany("Tariffs")
                        .HasForeignKey("TariffServiceId")
                        .HasConstraintName("FK_TARIFFS_SERVICES")
                        .IsRequired();

                    b.Navigation("TariffService");
                });

            modelBuilder.Entity("MeterWeb.Flat", b =>
                {
                    b.Navigation("Meters");
                });

            modelBuilder.Entity("MeterWeb.Meter", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("MeterWeb.MeterType", b =>
                {
                    b.Navigation("Meters");
                });

            modelBuilder.Entity("MeterWeb.Payment", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("MeterWeb.Service", b =>
                {
                    b.Navigation("MeterTypes");

                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("MeterWeb.Tariff", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
